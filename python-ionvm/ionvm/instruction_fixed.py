"""
IonVM Instruction set and bytecode generation.

This module provides classes for representing and serializing IonVM instructions
into bytecode format. Instructions are the fundamental operations that the IonVM
can execute, from basic arithmetic to control flow and actor operations.

The IonVM instruction set includes:
- Arithmetic operations (ADD, SUB, MUL, DIV)
- Memory operations (LOAD, STORE, MOVE)
- Control flow (JUMP, BRANCH, CALL, RETURN)
- Actor operations (SPAWN, SEND, RECEIVE)
- Object manipulation (GET_PROPERTY, SET_PROPERTY)
- Stack operations (PUSH, POP)

Instructions are typically generated by compilers or assembled manually
for testing and experimentation.
"""
from typing import List, Any, Dict, Optional


class Instruction:
    """
    Represents a single IonVM instruction that can be serialized to bytecode.
    
    Instructions are the atomic operations executed by the IonVM. Each instruction
    has an opcode (operation code) and zero or more operands. When serialized,
    instructions become bytecode that can be loaded and executed by the VM.
    
    Attributes:
        opcode: The operation code (e.g., "ADD", "LOAD", "JUMP")
        operands: List of operands for the instruction
        
    Example:
        >>> # Create arithmetic instruction
        >>> add_instr = Instruction("ADD", [1, 2, 3])  # r3 = r1 + r2
        >>> 
        >>> # Create load instruction  
        >>> load_instr = Instruction("LOAD", [0, Value.number(42)])  # r0 = 42
        >>>
        >>> # Create function call
        >>> call_instr = Instruction("CALL", [5, 10, [1, 2]])  # call func at r5, store result in r10
    """
    
    def __init__(self, opcode: str, *args):
        self.opcode = opcode
        self.args = args
    
    # Memory instructions
    @classmethod
