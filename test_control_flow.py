#!/usr/bin/env python3
"""
Test script demonstrating the control flow builders for IonVM.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'python-ionvm'))

from ionvm import IonPackBuilder, Function, Instruction, Value, IfElseBuilder


def create_control_flow_test():
    """Create a test that demonstrates if-else control flow."""
    builder = IonPackBuilder("control-flow-test", "1.0.0")
    builder.description("Test if-else control flow")
    builder.entry_point("main")
    builder.main_class("Main")
    
    # Create a function that uses if-else control flow
    # This function takes a number and returns:
    # - "small" if num < 10
    # - "medium" if 10 <= num < 100  
    # - "large" if num >= 100
    
    control_flow_instructions = []
    
    # Use the IfElseBuilder to create clean if-else logic
    if_builder = IfElseBuilder()
    
    # Load comparison values
    control_flow_instructions.append(Instruction.load_const(1, Value.number(10.0)))   # r1 = 10
    control_flow_instructions.append(Instruction.load_const(2, Value.number(100.0)))  # r2 = 100
    
    # Compare num < 10
    control_flow_instructions.append(Instruction.less_than(3, 0, 1))  # r3 = (r0 < r1)
    
    # if (num < 10)
    if_builder.if_condition(3)
    if_builder.add_instruction(Instruction.load_const(4, Value.atom("small")))
    if_builder.add_instruction(Instruction.return_reg(4))
    
    # else if (num < 100) 
    control_flow_instructions.append(Instruction.less_than(5, 0, 2))  # r5 = (r0 < r2)
    if_builder.elif_condition(5)
    if_builder.add_instruction(Instruction.load_const(4, Value.atom("medium")))
    if_builder.add_instruction(Instruction.return_reg(4))
    
    # else
    if_builder.else_block()
    if_builder.add_instruction(Instruction.load_const(4, Value.atom("large")))
    if_builder.add_instruction(Instruction.return_reg(4))
    
    # Build the if-else chain
    if_else_instructions = if_builder.build()
    
    # Combine the setup instructions with the if-else logic
    all_instructions = control_flow_instructions + if_else_instructions
    
    test_func = Function("classify_number", 1, 6, all_instructions)
    builder.add_class("TestModule", test_func)
    
    # Main function that calls the test
    main_instructions = [
        Instruction.load_const(0, Value.function_ref("TestModule:classify_number")),
        Instruction.load_const(1, Value.number(25.0)),  # Test with 25
        Instruction.call(2, 0, [1]),  # Call with argument
        Instruction.return_reg(2)
    ]
    
    main_func = Function("main", 0, 3, main_instructions)
    builder.add_class("Main", main_func)
    
    # Create the IonPack
    import io
    stream = io.BytesIO()
    builder.build(stream)
    ionpack = stream.getvalue()
    
    # Save to file
    with open('control_flow_test.ionpack', 'wb') as f:
        f.write(ionpack)
    
    print("Created control_flow_test.ionpack successfully!")
    print("Expected result: 'medium' (since 25 is between 10 and 100)")
    print("\nThe generated bytecode uses if-else control flow:")
    print("- if (num < 10) return 'small'")
    print("- else if (num < 100) return 'medium'")
    print("- else return 'large'")


def create_simple_if_else_example():
    """Create a simple demonstration of if-else."""
    print("\n" + "="*50)
    print("Simple If-Else Example")
    print("="*50)
    
    # Create a simple if-else that checks if a number is positive
    if_builder = IfElseBuilder()
    
    # Assume the number to test is in register 0
    # Load 0 for comparison
    setup_instructions = [
        Instruction.load_const(0, Value.number(-5.0)),  # Test number
        Instruction.load_const(1, Value.number(0.0)),   # Zero for comparison
        Instruction.greater_than(2, 0, 1),              # r2 = (r0 > r1)
    ]
    
    # if (num > 0)
    if_builder.if_condition(2)
    if_builder.add_instruction(Instruction.load_const(3, Value.atom("positive")))
    if_builder.add_instruction(Instruction.return_reg(3))
    
    # else
    if_builder.else_block() 
    if_builder.add_instruction(Instruction.load_const(3, Value.atom("not_positive")))
    if_builder.add_instruction(Instruction.return_reg(3))
    
    # Build and display the instructions
    if_else_instructions = if_builder.build()
    all_instructions = setup_instructions + if_else_instructions
    
    print(f"Generated {len(all_instructions)} instructions:")
    for i, instr in enumerate(all_instructions):
        print(f"  {i:2d}: {instr}")
    
    print("\nThis tests -5.0, so the result should be 'not_positive'")


if __name__ == "__main__":
    create_control_flow_test()
    create_simple_if_else_example()
